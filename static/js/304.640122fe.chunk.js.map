{"version":3,"file":"static/js/304.640122fe.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Filter/Filter.jsx","components/ContactForm/ButtonAdd.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/InputName.jsx","components/ContactForm/InputTel.jsx","components/ContactForm/LabelContact.jsx","components/Phonebook/Phonebook.jsx","components/Title/Title.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["export const getFilter = state => state.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/filter/filterActions';\nimport { Input, P } from 'components/Style/Element.styled';\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChange = event => {\n    dispatch(filterContact(event.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <P>Find contacts by name</P>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={onChange}\n        value={filter}\n        placeholder=\"Enter name\"\n      />\n    </div>\n  );\n};\n","import { Button } from 'components/Style/Element.styled';\nimport PropTypes from 'prop-types';\n\nconst ButtonAdd = ({ text }) => <Button type=\"submit\">{text}</Button>;\n\nexport default ButtonAdd;\n\nButtonAdd.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Form } from './../Style/Element.styled';\n\nconst ContactForm = ({ onSubmit, children }) => (\n  <Form onSubmit={onSubmit}>{children}</Form>\n);\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { Input } from 'components/Style/Element.styled';\nimport PropTypes from 'prop-types';\n\nconst InputName = ({ onChange, value }) => (\n  <Input\n    type=\"text\"\n    name=\"name\"\n    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    required\n    placeholder=\"Enter name\"\n    onChange={onChange}\n    value={value}\n  />\n);\n\nexport default InputName;\n\nInputName.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { Input } from 'components/Style/Element.styled';\nimport PropTypes from 'prop-types';\n\nconst InputTel = ({ onChange, value }) => (\n  <Input\n    type=\"tel\"\n    name=\"number\"\n    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    required\n    placeholder=\"123-45-67\"\n    onChange={onChange}\n    value={value}\n  />\n);\n\nexport default InputTel;\n\nInputTel.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { P } from 'components/Style/Element.styled';\nimport PropTypes from 'prop-types';\n\nexport const LabelContact = ({ title, children }) => (\n  <label>\n    <P>{title}</P>\n    {children}\n  </label>\n);\n\nLabelContact.propTypes = {\n  title: PropTypes.string,\n};\n","import { useState } from 'react';\nimport Notiflix from 'notiflix';\n//import { useDispatch, useSelector } from 'react-redux';\n//import { addContact } from 'redux/phonebookSlice';\nimport { nanoid } from 'nanoid';\nimport ButtonAdd from 'components/ContactForm/ButtonAdd';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport InputName from 'components/ContactForm/InputName';\nimport InputTel from 'components/ContactForm/InputTel';\nimport { LabelContact } from 'components/ContactForm/LabelContact';\nimport {\n  useGetContactQuery,\n  useAddContactMutation,\n} from '../../redux/contacts/contactsApi';\n\nexport const Phonebook = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const { data } = useGetContactQuery();\n  const [addContact] = useAddContactMutation();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'name') {\n      setName(value);\n    }\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const clickOnBtnAdd = async event => {\n    event.preventDefault();\n    try {\n      data.find(contact => contact.name === name)\n        ? Notiflix.Notify.info(`${name} is already in contacts.`)\n        : (await addContact({ name, number })) &&\n          Notiflix.Notify.success(`${name} added to your phonebook 🚀`);\n    } catch (error) {\n      console.log(error);\n    }\n    reset();\n  };\n\n  return (\n    <>\n      <ContactForm onSubmit={clickOnBtnAdd}>\n        <LabelContact title=\"Name\" htmlFor={nameInputId}>\n          <InputName value={name} onChange={handleChange} />\n        </LabelContact>\n        <LabelContact title=\"Number\" htmlFor={numberInputId}>\n          <InputTel value={number} onChange={handleChange} />\n        </LabelContact>\n        <ButtonAdd text=\"Add contact\" />\n      </ContactForm>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Title, TitleSecond } from 'components/Style/Element.styled';\n\nconst H1 = ({ title }) => <Title>{title}</Title>;\n\nconst H2 = ({ title }) => <TitleSecond>{title}</TitleSecond>;\n\nH1.propTypes = {\n  title: PropTypes.string,\n};\nH2.propTypes = {\n  title: PropTypes.string,\n};\n\nexport { H1, H2 };\n","import {\n  Button,\n  ContactItem,\n  Contacts,\n  ContactTxt,\n} from 'components/Style/Element.styled';\nimport { FaUserAlt } from 'react-icons/fa';\n\nimport { useSelector } from 'react-redux';\nimport { Suspense } from 'react';\nimport { Loader } from 'components/Loader/Loader';\n\nimport {\n  useGetContactQuery,\n  useDeleteContactMutation,\n} from 'redux/contacts/contactsApi.js';\n\nimport { getFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  //const dispatch = useDispatch();\n  //const contacts = useSelector(state => state.contacts);\n\n  const { data } = useGetContactQuery();\n  const [deleteContact] = useDeleteContactMutation();\n\n  const handleDeleteClick = id => {\n    deleteContact(id);\n  };\n\n  const searchFilter = useSelector(getFilter);\n\n  const getVisibleContacts = () => {\n    if (searchFilter !== '') {\n      return data.filter(({ name }) =>\n        name.toLowerCase().includes(searchFilter)\n      );\n    }\n    return data;\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <Contacts>\n        {visibleContacts.map(({ name, number, id }) => {\n          return (\n            <ContactItem key={id}>\n              <FaUserAlt />\n              <ContactTxt>\n                {name} : {number}\n              </ContactTxt>\n              <Button type=\"button\" onClick={() => handleDeleteClick(id)}>\n                Delete\n              </Button>\n            </ContactItem>\n          );\n        })}\n      </Contacts>\n    </Suspense>\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { ContactsContainer, P } from 'components/Style/Element.styled';\nimport { Filter } from 'components/Filter/Filter';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\nimport { H1, H2 } from 'components/Title/Title';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Outlet } from 'react-router-dom';\n//const LS_KEY = 'contacts';\n\nexport const Contacts = () => {\n  const contacts = useSelector(state => state.contacts);\n  console.log(contacts);\n\n  //useEffect(() => {\n  //  localStorage.setItem(LS_KEY, JSON.stringify(contacts));\n  //}, [contacts]);\n\n  return (\n    <ContactsContainer>\n      <H1 title=\"Phonebook\" />\n      <Phonebook />\n      {contacts.length > 0 ? (\n        <>\n          <H2 title=\"Contacts\" />\n          <Filter title=\"Find contact by name\" />\n          <ContactList />\n        </>\n      ) : (\n        <P>Phonebook is empty</P>\n      )}\n      <Outlet />\n    </ContactsContainer>\n  );\n};\n"],"names":["getFilter","state","filter","Filter","useSelector","dispatch","useDispatch","P","type","name","pattern","title","onChange","event","filterContact","currentTarget","value","placeholder","text","onSubmit","children","required","LabelContact","Phonebook","useState","setName","number","setNumber","nameInputId","nanoid","numberInputId","data","useGetContactQuery","useAddContactMutation","addContact","handleChange","e","clickOnBtnAdd","preventDefault","find","contact","Notiflix","console","log","htmlFor","H1","H2","ContactList","useDeleteContactMutation","deleteContact","searchFilter","visibleContacts","toLowerCase","includes","Suspense","fallback","Loader","map","id","onClick","handleDeleteClick","Contacts","contacts","length"],"sourceRoot":""}