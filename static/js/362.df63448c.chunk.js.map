{"version":3,"file":"static/js/362.df63448c.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/Title/Title.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { Input, P } from 'components/Style/Element.styled';\nimport { getFilter, setFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <P>Find contacts by name</P>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={onChange}\n        value={filter}\n        placeholder=\"Enter name\"\n      />\n    </div>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Title, TitleSecond } from 'components/Style/Element.styled';\n\nconst H1 = ({ title }) => <Title>{title}</Title>;\n\nconst H2 = ({ title }) => <TitleSecond>{title}</TitleSecond>;\n\nH1.propTypes = {\n  title: PropTypes.string,\n};\nH2.propTypes = {\n  title: PropTypes.string,\n};\n\nexport { H1, H2 };\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { deleteContact, fetchContacts } from 'redux/contacts/operations';\nimport { getFilter } from 'redux/filter/filterSlice';\nimport {\n  Button,\n  ContactItem,\n  Contacts,\n  ContactTxt,\n  P,\n} from 'components/Style/Element.styled';\nimport { FaUserAlt } from 'react-icons/fa';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(getContacts);\n  const currentFilter = useSelector(getFilter);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const delContact = e => {\n    const id = e.currentTarget.id;\n    dispatch(deleteContact(id));\n  };\n\n  const filtredContacts = () => {\n    const toLowCaseFilter = currentFilter.toLocaleLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(toLowCaseFilter)\n    );\n  };\n  const visibleContacts = filtredContacts();\n\n  return (\n    <Contacts>\n      {isLoading && <P>Loading contacts...</P>}\n      {error && <P>{error}</P>}\n      {visibleContacts.map(el => (\n        <ContactItem key={el.id}>\n          <FaUserAlt />\n          <ContactTxt>\n            {el.name} : {el.number}\n          </ContactTxt>\n          <Button id={el.id} type=\"button\" onClick={delContact}>\n            Delete\n          </Button>\n        </ContactItem>\n      ))}\n    </Contacts>\n  );\n};\n\nContactList.propTypes = {\n  currentFilter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, updateContact } from 'redux/contacts/operations';\nimport { Button, Form, Input, P } from 'components/Style/Element.styled';\nimport { getContacts } from 'redux/contacts/contactSlice';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContacts);\n  const handleChange = e => {\n    const event = e.target;\n\n    if (event.type === 'text') {\n      setName(event.value);\n    }\n    if (event.type === 'tel') {\n      setNumber(event.value);\n    }\n  };\n\n  const onSubmitEvt = e => {\n    e.preventDefault();\n\n    const inContactsName = items.find(el => el.name === name);\n    const inContactsPhone = items.find(el => el.number === number);\n\n    if (inContactsName) {\n      dispatch(\n        updateContact({\n          id: inContactsName.id,\n          name: name,\n          number: number,\n        })\n      );\n      setNumber('');\n      setName('');\n      return;\n    }\n    if (inContactsPhone) {\n      dispatch(\n        updateContact({\n          id: inContactsPhone.id,\n          name: name,\n          number: number,\n        })\n      );\n      setNumber('');\n      setName('');\n      return;\n    } else {\n      // else add\n      dispatch(addContact({ name: name, number: number }));\n    }\n\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <Form onSubmit={onSubmitEvt}>\n      <label>\n        <P>Name</P>\n\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          onChange={handleChange}\n          value={name}\n        />\n      </label>\n      <label>\n        <P>Number</P>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"123-45-67\"\n          onChange={handleChange}\n          value={number}\n        />\n      </label>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { ContactsContainer } from 'components/Style/Element.styled';\nimport { Filter } from 'components/Filter/Filter';\nimport { H1, H2 } from 'components/Title/Title';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst Contacts = () => {\n  return (\n    <ContactsContainer>\n      <H1 title=\"Phonebook\" />\n      <ContactForm />\n      <H2 title=\"Contacts\" />\n      <Filter title=\"Find contact by name\" />\n      <ContactList />\n    </ContactsContainer>\n  );\n};\nexport default Contacts;\n"],"names":["Filter","filter","useSelector","getFilter","dispatch","useDispatch","P","type","name","pattern","title","onChange","event","setFilter","currentTarget","value","placeholder","H1","H2","ContactList","getContacts","items","isLoading","error","currentFilter","useEffect","fetchContacts","delContact","e","id","deleteContact","visibleContacts","toLowCaseFilter","toLocaleLowerCase","contact","toLowerCase","includes","filtredContacts","map","el","number","onClick","ContactForm","useState","setName","setNumber","handleChange","target","onSubmit","preventDefault","inContactsName","find","inContactsPhone","updateContact","addContact","required"],"sourceRoot":""}